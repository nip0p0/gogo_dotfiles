au FileType ruby setl nowrap tabstop=8 tw=0 sw=2 expandtab
au FileType c setl ts=8 sw=4 noexpandtab

" NeoBundle 'Shougo/neocomplcache'
" NeoBundle 'Shougo/vimshell'
" NeoBundle 'Shougo/unite.vim'
" NeoBundle 'Railscasts-Theme-GUIand256color'
" NeoBundle 'osyo-manga/vim-sound'
" NeoBundle 'scrooloose/nerdtree'
" NeoBundle 'Lokaltog/powerline-fontpatcher'
" NeoBundle 'nathanaelkane/vim-indent-guides'
" NeoBundle 'Lokaltog/vim-powerline'

" neosnippet-snippets
" NeoBundle 'Shougo/neomru.vim'
" NeoBundle 'Shougo/vimproc'
" NeoBundle 'fholgado/minibufexpl.vim'
" NeoBundle 'tpope/vim-endwise'
" NeoBundle 'Shougo/vimfiler'
" NeoBundle 'tpope/vim-ragtag'
" NeoBundle 'tpope/vim-fugitive'

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.

"---------------
" Key map
"---------------
nnoremap + <C-a>
nnoremap - <C-x>

" Move to code edited latest
map <Space>l `.

" Search parenthesis
noremap <Space>p  %

" Emacs keybind
noremap <C-a> <Home>
noremap <C-e> <End>
noremap! <C-a> <Home>
noremap! <C-e> <End>
nnoremap <C-k> d$
inoremap <C-k> d$a

" Move by line
nnoremap j gj
nnoremap k gk

" Change file encoding
nmap ,U :set fileencoding=utf-8<CR>
nmap ,E :set fileencoding=euc-jp<CR>
nmap ,S :set fileencoding=cp932<CR>

" Reopen file with specifying encoding
nmap =U :e ++enc=utf8<CR>
nmap =S :e ++enc=sjis<CR>
nmap =E :e ++enc=euc-jp<CR>
nmap =J :e ++enc=iso-2022-jp<CR>

"---------------
" Filetype
"---------------

 augroup FileTypeDetect
   autocmd!
   autocmd BufRead,BufNewFile Capfile,Gemfile      setfiletype ruby
   autocmd BufRead,BufNewFile *.json               setfiletype javascript
   autocmd BufRead,BufNewFile *.coffee             setfiletype coffee
   autocmd BufRead,BufNewFile *.md                 setfiletype markdown
   autocmd BufRead,BufNewFile *.pp                 setfiletype puppet
   autocmd BufRead,BufNewFile *.scss               setfiletype scss
 augroup END

 augroup FileTypePlugin
   autocmd!
 autocmd FileType int-pry    setlocal nonu
   autocmd FileType int-python setlocal nonu
   autocmd FileType java       setlocal ts=4 sts=4 sw=4
   autocmd FileType javascript setlocal ts=2 sts=2 sw=2
   autocmd FileType ruby       setlocal ts=2 sts=2 sw=2
   autocmd FileType python     setlocal ts=4 sts=4 sw=4 si cinw=if,elif,else,for,while,try,except,finally,def,class
   autocmd FileType vim        setlocal ts=2 sts=2 sw=2
   autocmd FileType html       setlocal ts=2 sts=2 sw=2
   autocmd FileType scss       setlocal ts=2 sts=2 sw=2
   autocmd FileType css        setlocal ts=2 sts=2 sw=2
   autocmd FileType markdown   setlocal tw=0
   " autocmd FileType vimfiler   setlocal nonu
   autocmd FileType vimshell   setlocal nonu
 augroup END

"---------------
" color
"---------------
set t_Co=256
syntax on
colorscheme railscasts
hi LineNr ctermbg=black guifg=#FFFFFF

"補完候補の色づけ for vim7
hi Pmenu ctermbg=255 ctermfg=0 guifg=#000000 guibg=#999999
hi PmenuSel ctermbg=blue ctermfg=black
hi PmenuSbar ctermbg=0 ctermfg=9
hi PmenuSbar ctermbg=255 ctermfg=0 guifg=#000000 guibg=#FFFFFF


"---------------
" Neocomplcache
"---------------
" Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" let g:neocomplcache_enable_at_startup = 1
" let g:neocomplcache_enable_smart_case = 1
" let g:neocomplcache_enable_camel_case_completion = 1
" let g:neocomplcache_enable_underbar_completion = 1
" let g:neocomplcache_min_syntax_length = 3
" let g:neocomplcache_auto_completion_start_length = 2
" let g:neocomplcache_enable_auto_select = 1

""Plugin key-mappings.
" imap <C-k>     <Plug>(neocomplcache_snippets_expand)
" smap <C-k>     <Plug>(neocomplcache_snippets_expand)
" inoremap <expr><C-g> neocomplcache#undo_completion()
" inoremap <expr><C-l> neocomplcache#complete_common_string()

""Recommended key-mappings.
" inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <expr><C-h> neocomplcache#smart_close_popup().”\<C-h>”
" inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
" inoremap <expr><C-y> neocomplcache#close_popup()
" inoremap <expr><C-e> neocomplcache#cancel_popup()

"---------------
" vim-indent-guide
"---------------
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_guide_size=1
" let g:indent_guides_auto_colors=0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=8
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=15
"---------------
" MiniBufExplorer
"---------------
" let g:miniBufExplMapWindowNavVim = 1
" let g:miniBufExplMapWindowNavArrows = 1
" let g:miniBufExplMapCTabSwitchBufs = 1
" let g:miniBufExplModSelTarget = 1
" let g:miniBufExplSplitToEdge = 1
" let g:miniBufExplCycleArround = 1

""GNU screen likeなキーバインド
" nmap <S-Space> :MBEbp<CR>
" nmap <C-n> :MBEbp<CR>
" nmap <C-p> :MBEbn<CR>
" nnoremap <C-X><C-N> :new<CR>
" nnoremap <C-X><C-K> :bd<CR>

"---------------
" RagTag
"---------------
" let g:ragtag_global_maps = 1

"---------------
" VimSound
"---------------

"---------------
" nerdtree
"---------------
" nnoremap <silent> <Space>n :NERDTreeToggle<CR>
" let g:NERDTreeShowHidden=1
" let g:NERDTreeDirArrows=0

"---------------
" Unite
"---------------
" let g:unite_enable_start_insert = 1
" let g:unite_source_history_yank_enable =1
" let g:unite_source_grep_max_candidates = 200
" nnoremap [unite]    <Nop>
" nmap     <Space>u [unite]
" 
" nnoremap <silent> [unite]y   :<C-u>Unite history/yank<CR> 
" nnoremap <silent> [unite]b   :<C-u>Unite buffer<CR>
" nnoremap <silent> [unite]s   :<C-u>UniteWithCurrentDir -buffer-name=files file file/new<CR>
" nnoremap <silent> [unite]r   :<C-u>Unite -buffer-name=files file file_rec file/new<CR>

"---------------
" vimshell
"---------------
" nnoremap <C-i> :<C-u>VimShell<CR>
" nnoremap <silent> sh :<C-u>VimShell<CR>


"""""""""""""""""""""""""""""
" 自動的に閉じ括弧を入力
" """"""""""""""""""""""""""""""
"imap { {}<LEFT>
"imap [ []<LEFT>
"imap ( ()<LEFT>
" """"""""""""""""""""""""""""""
"オートCD
au BufEnter * execute ":lcd " . expand("%:p:h")


" カーソル位置を目立たせる
set cursorline
set cursorcolumn

highlight CursorLine ctermbg=254
highlight CursorLine ctermfg=232

highlight CursorColumn ctermbg=254
highlight CursorColumn ctermfg=232

"---------------
" Basic settings
"---------------

" OSのクリップボードをレジスタ指定無しで Yank, Put 出来るようにする
set clipboard=unnamed,unnamedplus

" 外部での変更の自動更新
set autoread

" 自動インデント
" set smartindent

"行番号を表示する
set number

"モードラインを書く行数
set modelines=0

"タブラインを非表示
set showtabline=0

"検索のハイライト
set hlsearch

"非互換モード
set nocompatible

"文字コード
set enc=utf-8
set fenc=utf-8
set fencs=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932

"IME
set imi=0
set ims=0

" バックスペースの挙動
set backspace=indent,eol,start

"ファイル中のタブ文字が対応する空白の数
set tabstop=2

"インデントは空白2つ
set shiftwidth=2

"タブが入力されたときの空白の数
set softtabstop=0

"タブではなく適切な数の空白を使う
set expandtab

" 対応する括弧を強調表示
set showmatch

" カーソル先の視界を何行確保するか
set scrolloff=5
set sidescrolloff=16

"バックアップしない
set nobackup

"スワップファイル作らない
set noswapfile

"変更しててもバッファ消せる
set modifiable

"バッファを保存しないで他のファイルを開けるようにする
set hidden

" インクリメンタルサーチしない
set incsearch

" 検索文字列が小文字の場合は大文字小文字を区別なく検索する
set ignorecase

" 検索文字列に大文字が含まれている場合は区別して検索する
set smartcase

" 置換の時 g オプションをデフォルトで有効にする
set gdefault

"検索時に最後まで行ったら最初に戻る
set wrapscan

"ステータスラインを表示
set laststatus=2
set statusline=%<%f\ %m%r%h%w%{'['.&fenc.']['.&ff.']'}%=%l,%c%V%8P

" 右下にカーソルの位置情報を表示
set ruler

"入力したコマンドをステータスラインに表示
set showcmd

" 最初の<Tab>で共通部分まで補完、2回目の<Tab>若しくは最初の<Tab>で共通部分がなかった場合は一覧表示、3回目以降の<Tab>で順番にマッチしたものを完全に補完する。
set wildmode=longest,list,full

" 強化されたコマンドライン補完を使用
set wildmenu

set diffexpr=MyDiff()

" 行頭行末の左右移動で行をまたぐ
" set whichwrap=b,s,h,l,<,>,[,]

"長い行を折り返さない
"set nowrap

"ペースト時にオートインデントを無効に
"set paste
"---------------
" デフォルト設定
"---------------

function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction
